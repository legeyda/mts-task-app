
buildscript {
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:2.1.6.RELEASE")
	}
}

plugins {
	id 'java'
	id 'org.hidetake.swagger.generator' version '2.18.1'
}


apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'


repositories {
	jcenter()
	mavenCentral()
}

dependencies {
	// spring
	compile 'org.springframework.boot:spring-boot-starter-web:2.1.3.RELEASE'
	compile 'org.aspectj:aspectjweaver:1.8.2'
			
	// swagger
	compile 'io.swagger.core.v3:swagger-annotations:2.0.7'
	compile 'io.springfox:springfox-swagger2:2.9.2'
	swaggerCodegen 'org.openapitools:openapi-generator-cli:3.3.4'
	swaggerUI 'org.webjars:swagger-ui:3.24.0'

	// redis
	compile 'redis.clients:jedis:2.9.0'
	compile 'com.github.jedis-lock:jedis-lock:1.0.0'
	
	// test
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile("org.assertj:assertj-core:3.11.1")

}


springBoot {
	mainClassName = 'com.legeyda.mts.Application'
}

bootRun {
	if (System.properties.containsKey('server.port')) {
		jvmArgs += '-Dserver.port=' + System.properties.getProperty('server.port') // обязательно, т-к абс отвечает в этой кодировке todo починить
	}
}

bootJar {
	dependsOn generateSwaggerUI
	from ('build/swagger-ui-api') {
		into 'public'
	}
}

swaggerSources {
	api {
		inputFile = file('src/main/swagger/api.yml')
		code {
			language = 'spring'
			configFile = file('src/main/swagger/config.json')
		}
	}
}

compileJava.dependsOn swaggerSources.api.code
sourceSets.main.java.srcDir "${swaggerSources.api.code.outputDir}/src/main/java"
sourceSets.main.resources.srcDir "${swaggerSources.api.code.outputDir}/src/main/resources"